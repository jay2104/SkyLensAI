generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LogFile {
  id                  String            @id @default(cuid())
  fileName            String
  fileType            LogFileType
  uploadStatus        UploadStatus      @default(PENDING)
  fileSize            Int
  userId              String
  createdAt           DateTime          @default(now())
  flightDuration      Float?
  maxAltitude         Float?
  totalDistance       Float?
  batteryStartVoltage Float?
  batteryEndVoltage   Float?
  gpsQuality          Int?
  flightModes         Json?
  analysisResult      AnalysisResult?
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeSeriesData      TimeSeriesPoint[]
  virtualExpertQueries VirtualExpertQuery[]

  @@index([userId])
}

model AnalysisResult {
  id               String         @id @default(cuid())
  status           AnalysisStatus @default(PENDING)
  healthScore      Int?
  summary          String?
  detailedFindings Json?
  logFileId        String         @unique
  userId           String
  createdAt        DateTime       @default(now())
  
  // AI Analysis fields for Story 1.3
  analysisType     String         @default("basic")    // "preview", "full", "diagnostic"
  insights         Json?                               // AI-generated insights and recommendations
  confidenceScore  Float?                              // AI confidence level (0-1)
  methodology      Json?                               // Analysis methodology and data sources
  
  logFile          LogFile        @relation(fields: [logFileId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([logFileId])
  @@index([userId])
}

model TimeSeriesPoint {
  id        String   @id @default(cuid())
  logFileId String
  timestamp Float
  parameter String
  value     Float
  unit      String
  createdAt DateTime @default(now())
  logFile   LogFile  @relation(fields: [logFileId], references: [id], onDelete: Cascade)

  @@index([logFileId, parameter])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                        String           @id @default(cuid())
  name                      String?
  email                     String?          @unique
  emailVerified             DateTime?
  image                     String?
  password                  String?
  subscriptionTier          SubscriptionTier @default(FREE)
  paymentProviderCustomerId String?
  createdAt                 DateTime         @default(now())
  updatedAt                 DateTime         @updatedAt
  
  // AI-related preference fields for Story 1.3
  aiPromptsEnabled     Boolean   @default(true)    // Show AI upgrade prompts
  aiPromptFrequency    String    @default("normal") // "low", "normal", "high"
  aiPreviewUsed        Boolean   @default(false)   // Has used AI preview
  lastAiPrompt         DateTime? // Last time AI prompt was shown
  
  // Virtual Expert usage tracking for Story 1.4
  queryCount      Int      @default(0)     // Total queries submitted
  monthlyQueries  Int      @default(0)     // Current month query count
  lastQueryReset  DateTime? // Last monthly reset date
  
  accounts                  Account[]
  analysisResults           AnalysisResult[]
  logFiles                  LogFile[]
  sessions                  Session[]
  virtualExpertQueries      VirtualExpertQuery[]
}

model VirtualExpertQuery {
  id              String   @id @default(cuid())
  userId          String
  logFileId       String?  // Optional - queries can be general or log-specific
  question        String   // User's plain text question
  context         Json?    // Additional context from log file analysis
  status          String   @default("pending") // "pending", "processed", "error"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  logFile         LogFile? @relation(fields: [logFileId], references: [id], onDelete: Cascade)
  response        ExpertResponse?
  
  @@index([userId])
  @@index([logFileId])
}

model ExpertResponse {
  id              String   @id @default(cuid())
  queryId         String   @unique
  response        String   // Generated expert response
  confidenceScore Float    // AI confidence level (0-1)
  methodology     Json     // RAG methodology and sources used
  citations       Json     // Source references and citations
  processingTime  Int      // Response generation time in milliseconds
  feedback        String?  // User feedback ("helpful", "not_helpful", "partially_helpful")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  query           VirtualExpertQuery @relation(fields: [queryId], references: [id], onDelete: Cascade)
  
  @@index([queryId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SubscriptionTier {
  FREE
  PRO
  ENTERPRISE
}

enum UploadStatus {
  PENDING
  UPLOADED
  PROCESSED
  ERROR
}

enum AnalysisStatus {
  PENDING
  COMPLETE
  ERROR
}

enum LogFileType {
  BIN
  LOG
  TLOG
  ULG
}
