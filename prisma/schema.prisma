// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Custom ENUM types for status fields to ensure data consistency
enum SubscriptionTier {
    FREE
    PRO
    ENTERPRISE
}

enum UploadStatus {
    PENDING
    UPLOADED
    PROCESSED
    ERROR
}

enum AnalysisStatus {
    PENDING
    COMPLETE
    ERROR
}

enum LogFileType {
    BIN
    LOG
    TLOG
    ULG
}

// SkyLensAI Data Models
model LogFile {
    id           String       @id @default(cuid())
    fileName     String
    fileType     LogFileType
    uploadStatus UploadStatus @default(PENDING)
    fileSize     Int
    userId       String
    createdAt    DateTime     @default(now())

    // Relationships
    user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    analysisResult AnalysisResult?

    @@index([userId])
}

model AnalysisResult {
    id               String         @id @default(cuid())
    status           AnalysisStatus @default(PENDING)
    healthScore      Int?
    summary          String?
    detailedFindings Json?
    logFileId        String         @unique
    createdAt        DateTime       @default(now())

    // Relationships
    logFile LogFile @relation(fields: [logFileId], references: [id], onDelete: Cascade)

    @@index([logFileId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                         String           @id @default(cuid())
    name                       String?
    email                      String?          @unique
    emailVerified              DateTime?
    image                      String?
    subscriptionTier           SubscriptionTier @default(FREE)
    paymentProviderCustomerId  String?
    createdAt                  DateTime         @default(now())
    updatedAt                  DateTime         @updatedAt

    // NextAuth relationships
    accounts Account[]
    sessions Session[]
    
    // SkyLensAI relationships
    logFiles LogFile[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
